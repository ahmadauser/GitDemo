<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="18" passed="14" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-08-01T08:28:45 IST" name="Suite23" finished-at="2022-08-01T08:28:45 IST" duration-ms="51">
    <groups>
      <group name="smoke">
        <method signature="RacingBikes.FZ()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.RacingBikes@67c33749]" name="FZ" class="MavenDemoGroId.MavenDemoArtId.RacingBikes"/>
        <method signature="tempo.Tempotirri()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.tempo@3d6f0054]" name="Tempotirri" class="MavenDemoGroId.MavenDemoArtId.tempo"/>
        <method signature="Cycle.Hercules()[pri:0, instance:Package2.Cycle@5fbdfdcf]" name="Hercules" class="Package2.Cycle"/>
        <method signature="Bike.yamaha()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" name="yamaha" class="MavenDemoGroId.MavenDemoArtId.Bike"/>
        <method signature="Cycle.Hercules()[pri:0, instance:Package2.Cycle@5d0a1059]" name="Hercules" class="Package2.Cycle"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2022-08-01T08:28:45 IST" name="Biketest" finished-at="2022-08-01T08:28:45 IST" duration-ms="50">
      <class name="MavenDemoGroId.MavenDemoArtId.tempo">
        <test-method signature="Rickshaw()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.tempo@3d6f0054]" started-at="2022-08-01T08:28:45 IST" name="Rickshaw" finished-at="2022-08-01T08:28:45 IST" duration-ms="8" status="FAIL">
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at MavenDemoGroId.MavenDemoArtId.tempo.Rickshaw(tempo.java:39)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Rickshaw -->
        <test-method signature="Tempotirri()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.tempo@3d6f0054]" started-at="2022-08-01T08:28:45 IST" name="Tempotirri" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tempotirri -->
        <test-method signature="Tempovikram()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.tempo@3d6f0054]" started-at="2022-08-01T08:28:45 IST" name="Tempovikram" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tempovikram -->
      </class> <!-- MavenDemoGroId.MavenDemoArtId.tempo -->
      <class name="MavenDemoGroId.MavenDemoArtId.Car">
        <test-method is-config="true" signature="innova()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Car@505fc5a4]" started-at="2022-08-01T08:28:45 IST" name="innova" finished-at="2022-08-01T08:28:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- innova -->
        <test-method is-config="true" signature="jeep()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Car@505fc5a4]" started-at="2022-08-01T08:28:45 IST" name="jeep" finished-at="2022-08-01T08:28:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jeep -->
        <test-method signature="brezza()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Car@505fc5a4]" started-at="2022-08-01T08:28:45 IST" name="brezza" finished-at="2022-08-01T08:28:45 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- brezza -->
        <test-method signature="kia()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Car@505fc5a4]" started-at="2022-08-01T08:28:45 IST" name="kia" finished-at="2022-08-01T08:28:45 IST" duration-ms="4" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertTrue(Assert.java:56)
at org.testng.Assert.assertTrue(Assert.java:66)
at MavenDemoGroId.MavenDemoArtId.Car.kia(Car.java:39)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kia -->
        <test-method signature="swift()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Car@505fc5a4]" started-at="2022-08-01T08:28:45 IST" name="swift" finished-at="2022-08-01T08:28:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- swift -->
        <test-method is-config="true" signature="fortuner()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Car@505fc5a4]" started-at="2022-08-01T08:28:45 IST" name="fortuner" finished-at="2022-08-01T08:28:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fortuner -->
      </class> <!-- MavenDemoGroId.MavenDemoArtId.Car -->
      <class name="Package2.Cycle">
        <test-method signature="BSA(java.lang.String,java.lang.String)[pri:0, instance:Package2.Cycle@5fbdfdcf]" started-at="2022-08-01T08:28:45 IST" name="BSA" data-provider="getCreds" finished-at="2022-08-01T08:28:45 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ahmad]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ali]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BSA -->
        <test-method signature="BSA(java.lang.String,java.lang.String)[pri:0, instance:Package2.Cycle@5fbdfdcf]" started-at="2022-08-01T08:28:45 IST" name="BSA" data-provider="getCreds" finished-at="2022-08-01T08:28:45 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[rabiya]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[nadeem]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BSA -->
        <test-method signature="BSA(java.lang.String,java.lang.String)[pri:0, instance:Package2.Cycle@5fbdfdcf]" started-at="2022-08-01T08:28:45 IST" name="BSA" data-provider="getCreds" finished-at="2022-08-01T08:28:45 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[manaal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[faatma]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BSA -->
        <test-method signature="Hercules()[pri:0, instance:Package2.Cycle@5fbdfdcf]" started-at="2022-08-01T08:28:45 IST" name="Hercules" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="FAIL">
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at Package2.Cycle.Hercules(Cycle.java:25)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Hercules -->
      </class> <!-- Package2.Cycle -->
      <class name="MavenDemoGroId.MavenDemoArtId.Bike">
        <test-method is-config="true" signature="activa(java.lang.String,java.lang.String)[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="activa" finished-at="2022-08-01T08:28:45 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[BikeTestURL.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UP50BB0076]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activa -->
        <test-method signature="honda()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="honda" finished-at="2022-08-01T08:28:45 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- honda -->
        <test-method is-config="true" signature="suzuki()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="suzuki" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suzuki -->
        <test-method is-config="true" signature="activa(java.lang.String,java.lang.String)[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="activa" finished-at="2022-08-01T08:28:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[BikeTestURL.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UP50BB0076]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activa -->
        <test-method signature="yamaha()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="yamaha" finished-at="2022-08-01T08:28:45 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- yamaha -->
        <test-method is-config="true" signature="suzuki()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="suzuki" finished-at="2022-08-01T08:28:45 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suzuki -->
        <test-method is-config="true" signature="activa(java.lang.String,java.lang.String)[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="activa" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[BikeTestURL.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UP50BB0076]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activa -->
        <test-method signature="bullet()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="bullet" finished-at="2022-08-01T08:28:45 IST" depends-on-methods="MavenDemoGroId.MavenDemoArtId.Bike.honda" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bullet -->
        <test-method is-config="true" signature="suzuki()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.Bike@247d8ae]" started-at="2022-08-01T08:28:45 IST" name="suzuki" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suzuki -->
      </class> <!-- MavenDemoGroId.MavenDemoArtId.Bike -->
      <class name="MavenDemoGroId.MavenDemoArtId.RacingBikes">
        <test-method signature="FZ()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.RacingBikes@67c33749]" started-at="2022-08-01T08:28:45 IST" name="FZ" finished-at="2022-08-01T08:28:45 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FZ -->
        <test-method is-config="true" signature="Ninja()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.RacingBikes@67c33749]" started-at="2022-08-01T08:28:45 IST" name="Ninja" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Ninja -->
      </class> <!-- MavenDemoGroId.MavenDemoArtId.RacingBikes -->
    </test> <!-- Biketest -->
    <test started-at="2022-08-01T08:28:45 IST" name="TwoWheelerTest" finished-at="2022-08-01T08:28:45 IST" duration-ms="51">
      <class name="MavenDemoGroId.MavenDemoArtId.tempo">
        <test-method is-config="true" signature="handpulled()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.tempo@3d6f0054]" started-at="2022-08-01T08:28:45 IST" name="handpulled" finished-at="2022-08-01T08:28:45 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- handpulled -->
        <test-method is-config="true" signature="haathgaadi()[pri:0, instance:MavenDemoGroId.MavenDemoArtId.tempo@3d6f0054]" started-at="2022-08-01T08:28:45 IST" name="haathgaadi" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- haathgaadi -->
      </class> <!-- MavenDemoGroId.MavenDemoArtId.tempo -->
      <class name="Package2.Cycle">
        <test-method signature="BSA(java.lang.String,java.lang.String)[pri:0, instance:Package2.Cycle@5d0a1059]" started-at="2022-08-01T08:28:45 IST" name="BSA" data-provider="getCreds" finished-at="2022-08-01T08:28:45 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ahmad]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ali]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BSA -->
        <test-method signature="BSA(java.lang.String,java.lang.String)[pri:0, instance:Package2.Cycle@5d0a1059]" started-at="2022-08-01T08:28:45 IST" name="BSA" data-provider="getCreds" finished-at="2022-08-01T08:28:45 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[rabiya]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[nadeem]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BSA -->
        <test-method signature="BSA(java.lang.String,java.lang.String)[pri:0, instance:Package2.Cycle@5d0a1059]" started-at="2022-08-01T08:28:45 IST" name="BSA" data-provider="getCreds" finished-at="2022-08-01T08:28:45 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[manaal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[faatma]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BSA -->
        <test-method signature="Hercules()[pri:0, instance:Package2.Cycle@5d0a1059]" started-at="2022-08-01T08:28:45 IST" name="Hercules" finished-at="2022-08-01T08:28:45 IST" duration-ms="1" status="FAIL">
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at Package2.Cycle.Hercules(Cycle.java:25)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:808)
at org.testng.TestRunner.run(TestRunner.java:603)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:32)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:467)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Hercules -->
      </class> <!-- Package2.Cycle -->
    </test> <!-- TwoWheelerTest -->
  </suite> <!-- Suite23 -->
</testng-results>
